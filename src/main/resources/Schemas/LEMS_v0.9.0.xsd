<?xml version="1.0" encoding="UTF-8"?>
<!--
	v0.9.0 Components are now more structured.

	v0.8.0 Supporting unordered LEMS documents via _choice_ instead of sequences.

	v0.7.3 supporting new LEMS elements required for GapJunctions & new connection specifications:
	Tunnel, InstanceRequirement, IndexParameter, ComponentRequirement

	v0.7.2 added the ability to validate LEMS files containing Simulation elements, as the form of this element
	is reasonably stable now

	v0.7.1 was a minor update, re adding the DerivedParameter element in ComponentType, and fully specifying the
	Simulation element so Simulation.xml can be validated

	v0.6 & v0.7 were updates prompted by the refactored Java LEMS implementation (https://github.com/robertcannon/jLEMS)
	and pylems (https://github.com/lisphacker/pylems)
-->
<xs:schema xmlns="http://www.neuroml.org/lems/0.9.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.neuroml.org/lems/0.9.0" elementFormDefault="qualified"
	attributeFormDefault="unqualified">


	<xs:element name="Lems" type="Lems"/>
	<xs:complexType name="Lems">
		<xs:annotation>
			<xs:documentation>The root Lems element.</xs:documentation>
		</xs:annotation>
			<xs:choice maxOccurs="unbounded">
				<xs:element name="Target" type="Target" />
				<xs:element name="Include" type="Include" />
				<xs:element name="Dimension" type="Dimension" />
				<xs:element name="Unit" type="Unit" />
				<xs:element name="Constant" type="Constant" />
				<xs:element name="ComponentType" type="ComponentType" />
				<xs:element name="Component" type="Component" />
			</xs:choice>
			<xs:attribute name="description" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="Target">
		<xs:attribute name="component" type="xs:string" use="required" />
		<xs:attribute name="reportFile" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>jLEMS only optional attribute to also write a
					short report with simulation duration, version, etc.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timesFile" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>jLEMS only optional attribute to also write a file
					containing actual times used in the simulation.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="Include">
		<xs:attribute name="file" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Dimension">
		<xs:complexContent>
			<xs:extension base="Named">
				<xs:attribute name="m" type="xs:integer" use="optional"
					default="0" />
				<xs:attribute name="l" type="xs:integer" use="optional"
					default="0" />
				<xs:attribute name="t" type="xs:integer" use="optional"
					default="0" />
				<xs:attribute name="i" type="xs:integer" use="optional"
					default="0" />
				<xs:attribute name="k" type="xs:integer" use="optional"
					default="0" />
				<xs:attribute name="n" type="xs:integer" use="optional"
					default="0" />
				<xs:attribute name="j" type="xs:integer" use="optional"
					default="0" />
			</xs:extension>

		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Unit">
		<xs:attribute name="symbol" type="xs:string" use="required" />
		<xs:attribute name="dimension" type="xs:string" use="required" />
		<xs:attribute name="power" type="xs:integer" use="optional"
			default="0">
			<xs:annotation>
				<xs:documentation>Some have asked whether fractional dimensions
					should be allowed. Disallowing it until needed...
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="scale" type="xs:float" use="optional"
			default="1" />
		<xs:attribute name="offset" type="xs:float" use="optional"
			default="0" />
	</xs:complexType>

	<xs:complexType name="DerivedParameter">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalValuedType"/>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Constant">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalValuedType"/>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ComponentReference">
		<xs:complexContent>
			<xs:extension base="NamedTyped">
				<xs:attribute name="local" type="xs:string" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Child">
		<xs:complexContent>
			<xs:extension base="NamedTyped">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Attachments">
		<xs:complexContent>
			<xs:extension base="NamedTyped">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="EventPort">
		<xs:complexContent>
			<xs:extension base="Named">
				<xs:attribute name="direction" type="xs:string" use="required" />
			</xs:extension>
		</xs:complexContent>
		<!-- Should be enumeration... -->
	</xs:complexType>

	<xs:complexType name="Fixed">
		<xs:attribute name="parameter" type="xs:string" use="required" />
		<xs:attribute name="value" type="xs:string" use="required" />
		<xs:attribute name="description" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="Link">
		<xs:complexContent>
			<xs:extension base="Named">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Children">
		<xs:complexContent>
			<xs:extension base="NamedTyped">
				<xs:attribute name="min" type="xs:integer" use="optional" />
				<xs:attribute name="max" type="xs:integer" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Path">
		<xs:complexContent>
			<xs:extension base="Named">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Text">
		<xs:complexContent>
			<xs:extension base="Named"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="StateVariable">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalType">
				<xs:attribute name="exposure" type="xs:string" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="DerivedVariable">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalValuedType">
				<xs:attribute name="exposure" type="xs:string" use="optional" />
				<xs:attribute name="select" type="xs:string" use="optional" /> <!-- only one of these... -->
				<xs:attribute name="reduce" type="xs:string" use="optional" /> <!-- only if select present... -->
				<xs:attribute name="required" type="xs:string" use="optional" /> <!-- only if reduce present... -->
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ConditionalDerivedVariable">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalValuedType">
				<xs:sequence>
					<xs:element name="Case" type="Case" minOccurs="1"
						maxOccurs="unbounded" />
				</xs:sequence>
				<xs:attribute name="exposure" type="xs:string" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Case">
		<xs:attribute name="condition" type="xs:string" use="required" />
		<xs:attribute name="value" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="TimeDerivative">
		<xs:attribute name="variable" type="xs:string" use="required" />
		<xs:attribute name="value" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="OnStart">
		<xs:sequence>
			<xs:element name="StateAssignment" type="StateAssignment"
				minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="OnEntry">
		<xs:sequence>
			<xs:element name="StateAssignment" type="StateAssignment"
				minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="OnEvent">
		<xs:choice maxOccurs="unbounded" minOccurs="0">
			<xs:element name="StateAssignment" type="StateAssignment" />
			<xs:element name="EventOut" type="EventOut" />
		</xs:choice>
		<xs:attribute name="port" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="OnCondition">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="StateAssignment" type="StateAssignment" />
			<xs:element name="EventOut" type="EventOut" />
			<xs:element name="Transition" type="Transition" minOccurs="0"
				maxOccurs="1" />
			<!-- only on OnCondition inside Regime... -->
		</xs:choice>
		<xs:attribute name="test" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="EventOut">
		<xs:attribute name="port" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="StateAssignment">
		<xs:attribute name="variable" type="xs:string" use="required" />
		<xs:attribute name="value" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Regime">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="TimeDerivative" type="TimeDerivative" />
			<xs:element name="OnEntry" type="OnStart" minOccurs="0"
				maxOccurs="1" />
			<xs:element name="OnCondition" type="OnCondition" />
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="initial" type="TrueOrFalse" use="optional" />
	</xs:complexType>

	<xs:simpleType name="TrueOrFalse">
		<xs:restriction base="xs:string">
			<xs:enumeration value="true" />
			<xs:enumeration value="false" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="Transition">
		<xs:attribute name="regime" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Component">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Component" type="Component" />
		</xs:sequence>
		<xs:attribute name="type" type="xs:string" use="required" />
		<xs:attribute name="name" type="xs:string" use="optional" />
		<xs:attribute name="id" type="xs:string" use="required" />
		<xs:anyAttribute processContents="lax" />
	</xs:complexType>

	<xs:complexType name="ComponentType">
		<xs:complexContent>
			<xs:extension base="Named">
				<xs:choice maxOccurs="unbounded">
					<xs:element name="Parameter" type="Parameter" />
					<xs:element name="Fixed" type="Fixed" />
					<xs:element name="Constant" type="Constant" />
					<xs:element name="DerivedParameter" type="DerivedParameter" />
					<xs:element name="Requirement" type="Requirement" />
					<xs:element name="Dynamics" type="Dynamics" />
					<xs:element name="Property" type="Property" />
					<xs:element name="IndexParameter" type="IndexParameter" />
					<xs:element name="Child" type="Child" />
					<xs:element name="Children" type="Children" />
					<xs:element name="Link" type="Link" />
					<xs:element name="ComponentReference" type="ComponentReference" />
					<xs:element name="Attachments" type="Attachments" />
					<xs:element name="EventPort" type="EventPort" />
					<xs:element name="Exposure" type="Exposure" />
					<xs:element name="ComponentRequirement" type="ComponentRequirement" />
					<xs:element name="InstanceRequirement" type="InstanceRequirement" />
					<xs:element name="Path" type="Path" />
					<xs:element name="Text" type="Text" />
					<xs:element name="Structure" type="Structure" />
					<xs:element name="Simulation" type="Simulation" />
				</xs:choice>
				<xs:attribute name="extends" type="xs:string" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Named" abstract="true">
		<xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="description" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="NamedDimensionalType" abstract="true">
		<xs:complexContent>
			<xs:extension base="Named">
				<xs:attribute name="dimension" type="xs:string" use="optional"
					default="none" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="NamedDimensionalValuedType" abstract="true">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalType">
				<xs:attribute name="value" type="xs:string" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="NamedTyped" abstract="true">
		<xs:complexContent>
			<xs:extension base="Named">
				<xs:attribute name="type" type="xs:string" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="Property">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalType" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Parameter">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalType" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="IndexParameter">
		<xs:attribute name="name" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Requirement">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalType" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="Exposure">
		<xs:complexContent>
			<xs:extension base="NamedDimensionalType" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ComponentRequirement">
		<xs:attribute name="name" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="InstanceRequirement">
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="type" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Dynamics">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="StateVariable" type="StateVariable" />
			<xs:element name="DerivedVariable" type="DerivedVariable" />
			<xs:element name="ConditionalDerivedVariable" type="ConditionalDerivedVariable" />
			<xs:element name="TimeDerivative" type="TimeDerivative" />
			<xs:element name="OnStart" type="OnStart" minOccurs="0"
				maxOccurs="1" />
			<xs:element name="OnEvent" type="OnEvent" />
			<xs:element name="OnCondition" type="OnCondition" />
			<xs:element name="Regime" type="Regime" />
			<xs:element name="KineticScheme" type="KineticScheme"
				minOccurs="0" maxOccurs="1" />
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="Structure">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="ChildInstance" type="ChildInstance" />
			<xs:element name="MultiInstantiate" type="MultiInstantiate" />
			<xs:element name="ForEach" type="ForEach" minOccurs="0" />
			<xs:element name="With" type="With" minOccurs="0" />
			<xs:element name="Tunnel" type="Tunnel" minOccurs="0" />
			<xs:element name="EventConnection" type="EventConnection" />
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="ChildInstance">
		<xs:attribute name="component" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="MultiInstantiate">
		<xs:attribute name="component" type="xs:string" use="required" />
		<xs:attribute name="number" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="ForEach">
		<xs:sequence>
			<xs:element name="MultiInstantiate" type="MultiInstantiate"
				minOccurs="0" maxOccurs="1" />
			<!--<xs:element name="ForEach" type="ForEach" minOccurs="0" maxOccurs="1"/>
				<xs:element name="EventConnection" type="EventConnection" minOccurs="0" maxOccurs="1"/> -->
		</xs:sequence>
		<xs:attribute name="instances" type="xs:string" use="required" />
		<xs:attribute name="as" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="With">
		<!-- EITHER instance OR list & index shoulf be used!! -->
		<xs:attribute name="instance" type="xs:string" use="optional" />
		<xs:attribute name="list" type="xs:string" use="optional" />
		<!-- EITHER instance OR list & index shoulf be used!! -->
		<xs:attribute name="index" type="xs:string" use="optional" />
		<xs:attribute name="as" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Tunnel">
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="endA" type="xs:string" use="required" />
		<xs:attribute name="endB" type="xs:string" use="required" />
		<xs:attribute name="componentA" type="xs:string" use="required" />
		<xs:attribute name="componentB" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="EventConnection">
		<xs:sequence>
			<xs:element name="Assign" type="Assign" minOccurs="0"
				maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="from" type="xs:string" use="required" />
		<xs:attribute name="to" type="xs:string" use="required" />
		<xs:attribute name="sourcePort" type="xs:string" use="optional" />
		<xs:attribute name="targetPort" type="xs:string" use="optional" />
		<xs:attribute name="receiver" type="xs:string" use="optional" />
		<xs:attribute name="receiverContainer" type="xs:string"
			use="optional" />
		<xs:attribute name="delay" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="Assign">
		<xs:attribute name="property" type="xs:string" use="required" />
		<xs:attribute name="value" type="xs:string" use="required" />
	</xs:complexType>


	<xs:complexType name="KineticScheme">
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="nodes" type="xs:string" use="required" />
		<xs:attribute name="stateVariable" type="xs:string" use="required" />
		<xs:attribute name="edges" type="xs:string" use="required" />
		<xs:attribute name="edgeSource" type="xs:string" use="required" />
		<xs:attribute name="edgeTarget" type="xs:string" use="required" />
		<xs:attribute name="forwardRate" type="xs:string" use="required" />
		<xs:attribute name="reverseRate" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Simulation">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="DataDisplay" type="DataDisplay" />
			<xs:element name="Record" type="Record" />
			<xs:element name="Run" type="Run" />
			<xs:element name="DataWriter" type="DataWriter" />
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="DataDisplay">
		<xs:attribute name="title" type="xs:string" use="required" />
		<xs:attribute name="dataRegion" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="Record">
		<xs:attribute name="quantity" type="xs:string" use="required" />
		<xs:attribute name="timeScale" type="xs:string" use="optional" />
		<xs:attribute name="scale" type="xs:string" use="optional" />
		<xs:attribute name="color" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="Run">
		<xs:attribute name="component" type="xs:string" use="required" />
		<xs:attribute name="variable" type="xs:string" use="required" />
		<xs:attribute name="increment" type="xs:string" use="required" />
		<xs:attribute name="total" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="DataWriter">
		<xs:attribute name="path" type="xs:string" use="required" />
		<xs:attribute name="fileName" type="xs:string" use="required" />
	</xs:complexType>

</xs:schema>
